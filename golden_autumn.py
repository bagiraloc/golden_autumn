import streamlit as st
import pandas as pd
import time

# ---- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ----
st.set_page_config(page_title="–ó–æ–ª–æ—Ç–∞ –æ—Å—ñ–Ω—å 2025", layout="wide")

# ---- CSS –¥–ª—è —Ç–µ–º–Ω–æ–≥–æ —Ñ–æ–Ω—É, –∞–Ω—ñ–º–∞—Ü—ñ–π —ñ –ª–∏—Å—Ç–æ–ø–∞–¥—É ----
st.markdown(
    """
    <style>
    body { background-color: #0b0b0b; color: #f6c453; overflow: hidden; }
    .leaf { position: fixed; top: -10vh; font-size: 30px; opacity: 0.9;
            animation-name: fall; animation-timing-function: linear; animation-iteration-count: infinite; z-index:0; }
    @keyframes fall { 0% {transform: translateY(0) rotate(0deg);} 100% {transform: translateY(120vh) rotate(360deg);} }
    .title { font-size: 48px; text-align: center; color: #f6c453; text-shadow: 0 0 20px #ffda77; margin-bottom: 6px; }
    .subtitle { text-align:center; color:#ffdca8; margin-bottom:18px; }
    .table-wrap { background: rgba(0,0,0,0.45); padding: 12px; border-radius:12px; box-shadow: 0 6px 20px rgba(0,0,0,0.6); }
    table.results { width:100%; border-collapse: collapse; }
    table.results th { color:#f6c453; font-size:18px; padding:8px 6px; text-align:center; }
    table.results td { color:#fff; padding:10px 6px; text-align:center; border-bottom: 1px solid rgba(246,196,83,0.12); }
    .new-row { animation: fadeInUp 0.9s ease; }
    @keyframes fadeInUp { from {opacity:0; transform: translateY(40px);} to {opacity:1; transform:translateY(0);} }
    .controls { margin-bottom:12px; }
    .small-muted { color:#c9b089; font-size:13px; text-align:center; margin-top:6px;}
    </style>
    """,
    unsafe_allow_html=True
)

# ---- –õ–∏—Å—Ç—è (HTML) ----
leaves_html = ""
for i in range(18):
    left = (i * 7) % 100
    dur = 8 + (i % 6)
    delay = (i % 5) * 0.6
    leaf = ["üçÅ", "üçÇ", "üçÉ"][i % 3]
    leaves_html += f'<div class="leaf" style="left:{left}%; animation-duration:{dur}s; animation-delay:{delay}s">{leaf}</div>'
st.markdown(leaves_html, unsafe_allow_html=True)

# ---- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ----
st.markdown('<div class="title">üçÅ –ó–æ–ª–æ—Ç–∞ –æ—Å—ñ–Ω—å 2025 üçÇ</div>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">–¢—É—Ä–Ω—ñ—Ä–Ω–∞ —Ç–∞–±–ª–∏—Ü—è ‚Äî –≤–≤–æ–¥—å—Ç–µ –æ—Ü—ñ–Ω–∫–∏ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É</div>', unsafe_allow_html=True)

# ---- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö ----
if "data" not in st.session_state:
    st.session_state.data = pd.DataFrame(columns=["–ú—ñ—Å—Ü–µ", "–Ü–º'—è", "–ö–ª—É–±", "–í–∏–¥", "–û—Ü—ñ–Ω–∫–∞"])

# ---- –§–æ—Ä–º–∞ –≤–≤–æ–¥—É ----
with st.form("add_form", clear_on_submit=True):
    c1, c2, c3, c4, c5 = st.columns([2,3,3,2,1])
    with c1:
        name = st.text_input("–Ü–º'—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∫–∏")
    with c2:
        club = st.text_input("–ö–ª—É–±")
    with c3:
        event = st.text_input("–í–∏–¥ (–Ω–∞–ø—Ä., –û–±—Ä—É—á)")
    with c4:
        score = st.number_input("–û—Ü—ñ–Ω–∫–∞", min_value=0.0, step=0.001, format="%.3f")
    with c5:
        submitted = st.form_submit_button("–î–æ–¥–∞—Ç–∏")
    if submitted and name:
        new_row = {"–ú—ñ—Å—Ü–µ": None, "–Ü–º'—è": name.strip(), "–ö–ª—É–±": club.strip(), "–í–∏–¥": event.strip(), "–û—Ü—ñ–Ω–∫–∞": float(score)}
        st.session_state.data = pd.concat([st.session_state.data, pd.DataFrame([new_row])], ignore_index=True)
        st.session_state.data = st.session_state.data.sort_values(by="–û—Ü—ñ–Ω–∫–∞", ascending=False, ignore_index=True)
        st.session_state.data["–ú—ñ—Å—Ü–µ"] = range(1, len(st.session_state.data) + 1)
        st.success(f"–î–æ–¥–∞–Ω–æ: {name}")
        time.sleep(0.45)

# ---- –§—ñ–ª—å—Ç—Ä –∑–∞ –≤–∏–¥–æ–º ----
all_events = ["–£—Å—ñ –≤–∏–¥–∏"] + sorted(set([v for v in st.session_state.data["–í–∏–¥"].dropna().astype(str).unique() if v!=""]))
sel_event = st.selectbox("–§—ñ–ª—å—Ç—Ä –∑–∞ –≤–∏–¥–æ–º:", all_events, index=0)
if sel_event == "–£—Å—ñ –≤–∏–¥–∏":
    display_df = st.session_state.data.copy()
else:
    display_df = st.session_state.data[st.session_state.data["–í–∏–¥"] == sel_event].reset_index(drop=True)
    display_df["–ú—ñ—Å—Ü–µ"] = range(1, len(display_df) + 1)

# ---- –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ HTML-—Ç–∞–±–ª–∏—Ü—ñ –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é —Ä—è–¥–∫–∞ ----
if not display_df.empty:
    df_for_show = display_df.copy()
    # —Ñ–æ—Ä–º–∞—Ç –û—Ü—ñ–Ω–∫–∞ –≤–∏–≤–µ—Å—Ç–∏ –∑ 3 –∑–Ω–∞–∫–∞–º–∏
    df_for_show["–û—Ü—ñ–Ω–∫–∞"] = df_for_show["–û—Ü—ñ–Ω–∫–∞"].map(lambda x: f"{x:.3f}")
    html_table = df_for_show.to_html(classes="results", index=False, escape=False)
    wrapped = f'<div class="table-wrap"><div class="new-row">{html_table}</div></div>'
    st.markdown(wrapped, unsafe_allow_html=True)
else:
    st.info("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –ø–æ–∫–∞–∑—É –≤ –æ–±—Ä–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")

st.markdown('<div class="small-muted">–¢–∞–±–ª–∏—Ü—è –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É</div>', unsafe_allow_html=True)

# ---- –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è ----
col_reset, col_export = st.columns([1,1])
with col_reset:
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é"):
        st.session_state.data = pd.DataFrame(columns=["–ú—ñ—Å—Ü–µ", "–Ü–º'—è", "–ö–ª—É–±", "–í–∏–¥", "–û—Ü—ñ–Ω–∫–∞"])
        st.experimental_rerun()
with col_export:
    if st.button("‚¨áÔ∏è –ï–∫—Å–ø–æ—Ä—Ç CSV"):
        csv = st.session_state.data.to_csv(index=False).encode('utf-8')
        st.download_button("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV", data=csv, file_name="zolota_osin_results.csv", mime="text/csv")