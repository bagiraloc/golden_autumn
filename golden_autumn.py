import streamlit as st
import pandas as pd
import random
from streamlit_gsheets import GSheetsConnection

# üåô –¢–µ–º–Ω–∞ —Ç–µ–º–∞ + –±–∞–∑–æ–≤–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
st.set_page_config(
    page_title="Golden Autumn üçÇ",
    page_icon="üçÅ",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# CSS –¥–ª—è —Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∏–ª—é + –∞–Ω—ñ–º–∞—Ü—ñ—è –ª–∏—Å—Ç–æ—á–∫—ñ–≤
st.markdown("""
    <style>
    body {
        background-color: #0e1117;
        color: #e0e0e0;
        font-family: 'Poppins', sans-serif;
    }
    .title {
        text-align: center;
        font-size: 2.2em;
        color: #ffb347;
        margin-bottom: 20px;
        text-shadow: 0 0 10px #ffb34780;
    }
    .leaf {
        position: fixed;
        top: -50px;
        font-size: 24px;
        animation-name: fall;
        animation-timing-function: linear;
        animation-iteration-count: infinite;
    }
    @keyframes fall {
        0% { transform: translateY(0) rotate(0deg); opacity: 1; }
        100% { transform: translateY(120vh) rotate(360deg); opacity: 0.2; }
    }
    </style>
""", unsafe_allow_html=True)

# üçÅ –ê–Ω—ñ–º–∞—Ü—ñ—è –ª–∏—Å—Ç–æ—á–∫—ñ–≤
def falling_leaves():
    leaves = ["üçÇ", "üçÅ", "üçÉ"]
    html = ""
    for i in range(20):
        leaf = random.choice(leaves)
        left = random.randint(0, 100)
        duration = random.uniform(6, 12)
        delay = random.uniform(0, 5)
        html += f'<div class="leaf" style="left: {left}%; animation-duration: {duration}s; animation-delay: {delay}s;">{leaf}</div>'
    st.markdown(html, unsafe_allow_html=True)

falling_leaves()

# üßæ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
try:
    conn = st.connection("gsheets", type=GSheetsConnection)
    df = conn.read(worksheet="–£—á–∞—Å–Ω–∏—Ü—ñ", usecols=list(range(3)), ttl=5)
    df = df.dropna(how="all")
except Exception as e:
    st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑'—î–¥–Ω–∞–Ω–Ω—ñ –∑ Google Sheets")
    st.stop()

# üåü –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown('<div class="title">Golden Autumn üçÅ</div>', unsafe_allow_html=True)

# üìã –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —É—á–∞—Å–Ω–∏—Ü—ñ
with st.form("add_participant", clear_on_submit=True):
    name = st.text_input("–Ü–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ", placeholder="–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è...")
    age = st.number_input("–í—ñ–∫", min_value=5, max_value=100, step=1)
    city = st.text_input("–ú—ñ—Å—Ç–æ", placeholder="–ó–≤—ñ–¥–∫–∏ —É—á–∞—Å–Ω–∏—Ü—è?")
    submitted = st.form_submit_button("–î–æ–¥–∞—Ç–∏ üåü")

    if submitted:
        if name and city:
            new_row = pd.DataFrame([[name, age, city]], columns=["–Ü–º‚Äô—è", "–í—ñ–∫", "–ú—ñ—Å—Ç–æ"])
            updated_df = pd.concat([df, new_row], ignore_index=True)
            conn.update(worksheet="–£—á–∞—Å–Ω–∏—Ü—ñ", data=updated_df)
            st.success(f"‚úÖ –£—á–∞—Å–Ω–∏—Ü—é **{name}** —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
            st.balloons()
        else:
            st.warning("‚ö†Ô∏è –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è!")

# üß° –¢–∞–±–ª–∏—Ü—è —É—á–∞—Å–Ω–∏—Ü—å
st.markdown("### –£—á–∞—Å–Ω–∏—Ü—ñ:")
st.dataframe(df, use_container_width=True, hide_index=True)
