# golden_autumn.py
import streamlit as st
import pandas as pd
import random
import os
import time
from datetime import datetime
import io

# -------------------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ --------------------
st.set_page_config(page_title="–ó–æ–ª–æ—Ç–∞ –û—Å—ñ–Ω—å 2025", layout="wide")

# -------------------- –ê–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ JS (5s) --------------------
# –¶–µ –æ–Ω–æ–≤–ª—é—î —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥, —â–æ–± –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–∏ –≤ results.csv
st.markdown(
    """
    <script>
    // –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(()=>{ window.location.reload(); }, 5000);
    </script>
    """,
    unsafe_allow_html=True,
)

# -------------------- CSS —Å—Ç–∏–ª—å —Ç–∞ –∞–Ω—ñ–º–∞—Ü—ñ—ó --------------------
st.markdown(
    """
    <style>
    :root {
      --bg: #0b0b0b;
      --panel: #121212;
      --gold: #f6c453;
      --accent: #b8860b;
      --muted: #ddd6c9;
    }
    body, .stApp {
      background: linear-gradient(180deg, #050505 0%, #131313 100%);
      color: var(--gold);
    }
    h1.app-title {
      text-align: center;
      color: var(--gold);
      font-weight: 800;
      text-shadow: 0 0 25px rgba(246,196,83,0.2);
      font-size: 44px;
      margin-bottom: 0.5rem;
    }
    .subtitle {
      text-align:center;
      color: var(--muted);
      margin-bottom: 1.2rem;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      background: rgba(20,20,20,0.8);
      color: var(--gold);
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 6px 30px rgba(0,0,0,0.6);
    }
    th, td {
      padding: 12px 14px;
      text-align: center;
      font-size: 18px;
    }
    th {
      background: #1f1f1f;
      color: var(--gold);
      border-bottom: 2px solid rgba(246,196,83,0.12);
    }
    tr:nth-child(even) td { background: rgba(255,255,255,0.01); }
    .crown { font-weight: 800; text-shadow: 0 0 10px rgba(255,225,120,0.6); }
    .leaf {
      position: fixed;
      top: -10vh;
      color: var(--gold);
      opacity: 0.95;
      animation: fall linear infinite;
      z-index: 0;
      pointer-events: none;
    }
    @keyframes fall {
      0% { transform: translateY(-10vh) rotate(0deg); }
      100% { transform: translateY(110vh) rotate(360deg); }
    }
    .new-row {
      animation: slideUp 0.8s ease-out;
      background: linear-gradient(90deg, rgba(246,196,83,0.06), rgba(246,196,83,0.02));
    }
    @keyframes slideUp {
      from { transform: translateY(30px); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }
    /* —Ñ–æ—Ä–º–∞ –≤–Ω–∏–∑—É */
    .bottom-form {
      position: sticky;
      bottom: 12px;
      z-index: 3;
      padding-top: 10px;
      background: linear-gradient(180deg, rgba(10,10,10,0.0), rgba(7,7,7,0.45));
      margin-top: 20px;
    }
    /* –ó–º–µ–Ω—à—É–≤–∞—Ç–∏ —à—Ä–∏—Ñ—Ç —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–∏ –≤–µ–ª–∏–∫—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤ */
    @media (max-height: 900px) {
      th, td { font-size: 15px; padding: 8px 10px; }
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# -------------------- –õ–∏—Å—Ç–æ—á–∫–∏ (—Ç—ñ–ª—å–∫–∏ –∫–ª–µ–Ω–æ–≤—ñ) --------------------
leaves_html = ""
for i in range(18):
    left = random.randint(0, 100)
    duration = random.uniform(12, 26)
    delay = random.uniform(0, 12)
    size = random.uniform(20, 44)
    leaves_html += f'<div class="leaf" style="left:{left}vw; animation-duration:{duration}s; animation-delay:{delay}s; font-size:{size}px;">üçÅ</div>'
st.markdown(leaves_html, unsafe_allow_html=True)

# -------------------- –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è --------------------
CSV_FILE = "results.csv"
DEFAULT_COLS = ["–ú—ñ—Å—Ü–µ", "–Ü–º‚Äô—è", "–ö–ª—É–±", "–í–∏–¥", "–û—Ü—ñ–Ω–∫–∞", "–î–æ–¥–∞–Ω–æ"]

def load_data():
    if os.path.exists(CSV_FILE):
        try:
            df = pd.read_csv(CSV_FILE)
            # –ø–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ –≤—Å—ñ –∫–æ–ª–æ–Ω–∫–∏ —î
            for c in DEFAULT_COLS:
                if c not in df.columns:
                    df[c] = ""
            return df[DEFAULT_COLS]
        except Exception as e:
            st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª results.csv: " + str(e))
            return pd.DataFrame(columns=DEFAULT_COLS)
    else:
        # –ø—É—Å—Ç–∏–π DataFrame —ñ–∑ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        return pd.DataFrame(columns=DEFAULT_COLS)

def save_data(df):
    df.to_csv(CSV_FILE, index=False)

# -------------------- –ó–∞–≥–æ–ª–æ–≤–æ–∫ --------------------
st.markdown('<h1 class="app-title">üëë –ó–æ–ª–æ—Ç–∞ –û—Å—ñ–Ω—å 2025 üçÅ</h1>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">–¢—É—Ä–Ω—ñ—Ä–Ω–∞ —Ç–∞–±–ª–∏—Ü—è ‚Äî –≤–≤–æ–¥—å—Ç–µ –¥–∞–Ω—ñ –≤–Ω–∏–∑—É. –ù–æ–≤—ñ —É—á–∞—Å–Ω–∏—Ü—ñ –∞–Ω—ñ–º–æ–≤–∞–Ω–æ –ø—ñ–¥—Ç—è–≥—É—é—Ç—å—Å—è.</div>', unsafe_allow_html=True)

# -------------------- –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ --------------------
df = load_data()

# -------------------- –û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –≤–Ω–∏–∑—É --------------------
with st.form("add_form", clear_on_submit=True):
    st.markdown("<div style='display:flex; gap:12px; align-items:center;'>", unsafe_allow_html=True)
    colA, colB, colC, colD, colE = st.columns([1.2, 2.5, 2.5, 1.8, 1.2])
    with colA:
        name = st.text_input("–Ü–º'—è", "")
    with colB:
        club = st.text_input("–ö–ª—É–±", "")
    with colC:
        category = st.text_input("–í–∏–¥", "")
    with colD:
        score = st.text_input("–û—Ü—ñ–Ω–∫–∞ (–Ω–∞–ø—Ä. 27.750)", "")
    with colE:
        add_btn = st.form_submit_button("‚ûï –î–æ–¥–∞—Ç–∏")
    st.markdown("</div>", unsafe_allow_html=True)

# –ü—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ ‚Äî –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ –∑–∞–ø–∏—Å —É CSV
if add_btn:
    if not (name and club and category and score):
        st.warning("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è: –Ü–º'—è, –ö–ª—É–±, –í–∏–¥, –û—Ü—ñ–Ω–∫–∞.")
    else:
        try:
            score_val = float(str(score).replace(",", "."))
            new_row = {
                "–ú—ñ—Å—Ü–µ": None,
                "–Ü–º‚Äô—è": name.strip(),
                "–ö–ª—É–±": club.strip(),
                "–í–∏–¥": category.strip(),
                "–û—Ü—ñ–Ω–∫–∞": score_val,
                "–î–æ–¥–∞–Ω–æ": datetime.utcnow().isoformat()
            }
            df = load_data()  # —â–µ —Ä–∞–∑ –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É
            df = df.append(new_row, ignore_index=True)
            # —Å–æ—Ä—Ç—É—î–º–æ, –ø—Ä–æ—Å—Ç–∞–≤–ª—è—î–º–æ –º—ñ—Å—Ü—è
            df["–û—Ü—ñ–Ω–∫–∞"] = pd.to_numeric(df["–û—Ü—ñ–Ω–∫–∞"], errors="coerce").fillna(0)
            df = df.sort_values(by="–û—Ü—ñ–Ω–∫–∞", ascending=False).reset_index(drop=True)
            df["–ú—ñ—Å—Ü–µ"] = df.index + 1
            save_data(df)
            # –ø–æ–∑–Ω–∞—á–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –¥–æ–¥–∞–Ω–æ–≥–æ –≤ —Å–µ—Å—ñ—ó –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
            st.session_state["last_added"] = name.strip()
            st.experimental_rerun()
        except ValueError:
            st.error("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –æ—Ü—ñ–Ω–∫–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 27.750")

# -------------------- –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é (–∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ) --------------------
if not df.empty:
    display_df = df.copy()
    # –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –æ—Ü—ñ–Ω–∫–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    display_df["–û—Ü—ñ–Ω–∫–∞"] = display_df["–û—Ü—ñ–Ω–∫–∞"].map(lambda v: ("{:.3f}".format(v)) if pd.notna(v) else "")
    # –¥–æ–¥–∞–º–æ –∫–æ—Ä–æ–Ω—É –ø–µ—Ä—à–æ–º—É
    if len(display_df) >= 1:
        display_df.iloc[0, display_df.columns.get_loc("–Ü–º‚Äô—è")] = f"üëë <span class='crown'>{display_df.iloc[0]['–Ü–º‚Äô—è']}</span>"

    # –≥–µ–Ω–µ—Ä—É—î–º–æ HTML-—Ç–∞–±–ª–∏—Ü—é –≤—Ä—É—á–Ω—É, —â–æ–± –¥–æ–¥–∞—Ç–∏ –∫–ª–∞—Å new-row –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –¥–æ–¥–∞–Ω–æ–≥–æ (–∑–∞ —ñ–º'—è–º)
    l
