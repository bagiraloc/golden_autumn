import streamlit as st
import pandas as pd
import time
import random

# -------------------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ --------------------
st.set_page_config(page_title="–ó–æ–ª–æ—Ç–∞ –û—Å—ñ–Ω—å 2025", layout="wide")

# -------------------- –¢–µ–º–Ω–∏–π —Å—Ç–∏–ª—å –∑ –∑–æ–ª–æ—Ç–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ --------------------
st.markdown("""
<style>
body {
    background-color: #1a1a1a;
    color: #f6c453;
    overflow: hidden;
}
h1 {
    text-align: center;
    color: #f6c453;
    text-shadow: 0 0 20px #c49b3a;
    margin-bottom: 30px;
}
table {
    width: 100%;
    border-collapse: collapse;
    background: #262626;
    border-radius: 12px;
    overflow: hidden;
    color: #f6c453;
}
th, td {
    padding: 10px;
    text-align: center;
}
th {
    background-color: #333;
    color: #f6c453;
    font-weight: bold;
    border-bottom: 2px solid #f6c453;
}
tr {
    transition: all 0.7s ease-in-out;
}
tr.new-row {
    animation: slideUp 1.2s ease-out;
}
@keyframes slideUp {
    from { transform: translateY(60px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}
button, .stButton>button {
    background: linear-gradient(90deg, #f6c453, #b8860b);
    color: #1a1a1a;
    border: none;
    border-radius: 8px;
    font-weight: bold;
    padding: 0.6rem 1.2rem;
}
button:hover {
    background: linear-gradient(90deg, #ffd700, #f6c453);
    color: black;
}
.leaf {
    position: fixed;
    top: -10vh;
    color: #f6c453;
    opacity: 0.8;
    animation: fall linear infinite;
}
@keyframes fall {
    0% { transform: translateY(0) rotate(0deg); }
    100% { transform: translateY(110vh) rotate(360deg); }
}
.crown {
    font-size: 28px;
    animation: crownPulse 2s ease-in-out infinite;
}
@keyframes crownPulse {
    0%, 100% { transform: scale(1); text-shadow: 0 0 10px gold; }
    50% { transform: scale(1.2); text-shadow: 0 0 25px gold; }
}
</style>
""", unsafe_allow_html=True)

# -------------------- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–∏—Å—Ç–æ—á–∫—ñ–≤ --------------------
leaves_html = ""
for i in range(20):
    left = random.randint(0, 100)
    duration = random.uniform(12, 22)
    delay = random.uniform(0, 15)
    size = random.uniform(20, 40)
    leaf = random.choice(["üçÅ", "üçÇ", "üçÉ"])
    leaves_html += f'<div class="leaf" style="left:{left}vw; animation-duration:{duration}s; animation-delay:{delay}s; font-size:{size}px;">{leaf}</div>'
st.markdown(leaves_html, unsafe_allow_html=True)

# -------------------- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—ñ --------------------
if "results" not in st.session_state:
    st.session_state.results = pd.DataFrame(columns=["–ú—ñ—Å—Ü–µ", "–Ü–º'—è", "–ö–ª—É–±", "–í–∏–¥", "–û—Ü—ñ–Ω–∫–∞"])

# -------------------- –ù–∞–∑–≤–∞ --------------------
st.markdown("<h1>–ó–æ–ª–æ—Ç–∞ –û—Å—ñ–Ω—å 2025 üçÅ</h1>", unsafe_allow_html=True)

# -------------------- –¢–∞–±–ª–∏—Ü—è --------------------
if not st.session_state.results.empty:
    sorted_df = st.session_state.results.sort_values(by="–û—Ü—ñ–Ω–∫–∞", ascending=False).reset_index(drop=True)
    sorted_df["–ú—ñ—Å—Ü–µ"] = sorted_df.index + 1
    if not sorted_df.empty:
        sorted_df.iloc[0, 1] = f"üëë {sorted_df.iloc[0, 1]}"
    st.markdown(sorted_df.to_html(index=False, classes="results-table"), unsafe_allow_html=True)
else:
    st.info("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —É—á–∞—Å–Ω–∏—Ü—å. –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à—É –Ω–∏–∂—á–µ üëá")

# -------------------- –ü–∞–Ω–µ–ª—å –≤–≤–µ–¥–µ–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ç–µ–±–µ) --------------------
with st.expander("üîí –ü–∞–Ω–µ–ª—å —Å—É–¥–¥—ñ", expanded=False):
    col1, col2, col3, col4 = st.columns(4)
    name = col1.text_input("–Ü–º‚Äô—è")
    club = col2.text_input("–ö–ª—É–±")
    category = col3.text_input("–í–∏–¥")
    score = col4.number_input("–û—Ü—ñ–Ω–∫–∞", min_value=0.0, max_value=60.0, step=0.05)

    add_btn = st.button("‚ûï –î–æ–¥–∞—Ç–∏ —É—á–∞—Å–Ω–∏—Ü—é")
    clear_btn = st.button("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é")

# -------------------- –î–æ–¥–∞–≤–∞–Ω–Ω—è / –æ—á–∏—â–µ–Ω–Ω—è --------------------
if add_btn and name and club and category:
    new_row = pd.DataFrame([[None, name, club, category, score]], columns=["–ú—ñ—Å—Ü–µ", "–Ü–º'—è", "–ö–ª—É–±", "–í–∏–¥", "–û—Ü—ñ–Ω–∫–∞"])
    st.session_state.results = pd.concat([st.session_state.results, new_row], ignore_index=True)
    st.experimental_rerun()

if clear_btn:
    st.session_state.results = pd.DataFrame(columns=["–ú—ñ—Å—Ü–µ", "–Ü–º'—è", "–ö–ª—É–±", "–í–∏–¥", "–û—Ü—ñ–Ω–∫–∞"])
    st.experimental_rerun()

# -------------------- –ü–æ–≤—Ç–æ—Ä–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è –¥–ª—è 1-–≥–æ –º—ñ—Å—Ü—è --------------------
time.sleep(25)
st.markdown("<script>document.querySelector('.crown').classList.add('active');</script>", unsafe_allow_html=True)
