import streamlit as st
import pandas as pd
import random
from streamlit_gsheets import GSheetsConnection
from streamlit_autorefresh import st_autorefresh

# -------------------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ --------------------
st.set_page_config(page_title="–ó–æ–ª–æ—Ç–∞ –û—Å—ñ–Ω—å 2025", layout="wide")

# -------------------- CSS —Å—Ç–∏–ª—å --------------------
st.markdown("""
<style>
body {
    background: linear-gradient(180deg, #0d0d0d, #1a1a1a);
    color: #f6c453;
    overflow-x: hidden;
}
h1 {
    text-align: center;
    color: #f6c453;
    font-weight: bold;
    text-shadow: 0 0 25px #f6c453;
    margin-bottom: 30px;
    animation: glow 2s ease-in-out infinite alternate;
}
@keyframes glow {
    from { text-shadow: 0 0 15px #f6c453; }
    to { text-shadow: 0 0 35px #ffd700; }
}
table {
    width: 100%;
    border-collapse: collapse;
    background: rgba(30,30,30,0.9);
    color: #f6c453;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 0 20px rgba(246,196,83,0.3);
}
th, td {
    padding: 10px;
    text-align: center;
    font-size: 18px;
}
th {
    background-color: #333;
    color: #f6c453;
    border-bottom: 2px solid #f6c453;
}
tr {
    transition: transform 0.4s ease, opacity 0.4s ease;
}
tr.new {
    transform: translateY(40px);
    opacity: 0;
    animation: slideUp 0.7s forwards;
}
@keyframes slideUp {
    from { transform: translateY(40px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}
.crown {
    animation: crownPulse 2.5s ease-in-out infinite;
}
@keyframes crownPulse {
    0%, 100% { text-shadow: 0 0 10px #ffd700; }
    50% { text-shadow: 0 0 25px #ffea00; }
}
.leaf {
    position: fixed;
    top: -10vh;
    color: #f6c453;
    opacity: 0.8;
    animation: fall linear infinite;
    z-index: -1;
}
@keyframes fall {
    0% { transform: translateY(0) rotate(0deg); }
    100% { transform: translateY(110vh) rotate(360deg); }
}
</style>
""", unsafe_allow_html=True)

# -------------------- –ê–Ω—ñ–º–∞—Ü—ñ—è –ª–∏—Å—Ç–æ—á–∫—ñ–≤ üçÅ --------------------
leaves_html = ""
for i in range(25):
    left = random.randint(0, 100)
    duration = random.uniform(15, 30)
    delay = random.uniform(0, 20)
    size = random.uniform(20, 36)
    leaves_html += f'<div class="leaf" style="left:{left}vw; animation-duration:{duration}s; animation-delay:{delay}s; font-size:{size}px;">üçÅ</div>'
st.markdown(leaves_html, unsafe_allow_html=True)

# -------------------- –ù–∞–∑–≤–∞ --------------------
st.markdown("<h1>–ó–æ–ª–æ—Ç–∞ –û—Å—ñ–Ω—å 2025 üçÅ</h1>", unsafe_allow_html=True)

# -------------------- –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–æ–∂–Ω—ñ 10 —Å–µ–∫ --------------------
st_autorefresh(interval=10 * 1000, key="data_refresh")

# -------------------- –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ Google Sheets --------------------
conn = st.connection("gsheets", type=GSheetsConnection)

sheet_url = "https://docs.google.com/spreadsheets/d/1S5mf3gVU-FHgOJ_kpfTn02ZzYeXMw0VTfGNX-RL6KMY/edit?gid=0"

@st.cache_data(ttl=10)
def load_data():
    try:
        df = conn.read(spreadsheet=sheet_url)
        if not df.empty:
            df = df.dropna(how="all")
            df.columns = [c.strip() for c in df.columns]
            df = df[df["–Ü–º‚Äô—è"].notna()]
            df["–û—Ü—ñ–Ω–∫–∞"] = pd.to_numeric(df["–û—Ü—ñ–Ω–∫–∞"], errors="coerce")
            df = df.sort_values(by="–û—Ü—ñ–Ω–∫–∞", ascending=False).reset_index(drop=True)
            df["–ú—ñ—Å—Ü–µ"] = df.index + 1
        else:
            df = pd.DataFrame(columns=["–ú—ñ—Å—Ü–µ", "–Ü–º‚Äô—è", "–ö–ª—É–±", "–í–∏–¥", "–û—Ü—ñ–Ω–∫–∞"])
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è Google Sheets: {e}")
        df = pd.DataFrame(columns=["–ú—ñ—Å—Ü–µ", "–Ü–º‚Äô—è", "–ö–ª—É–±", "–í–∏–¥", "–û—Ü—ñ–Ω–∫–∞"])
    return df

df = load_data()

# -------------------- –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ --------------------
if not df.empty:
    rows_html = ""
    for i, row in df.iterrows():
        place = int(row["–ú—ñ—Å—Ü–µ"])
        name = str(row["–Ü–º‚Äô—è"])
        club = str(row["–ö–ª—É–±"])
        vid = str(row["–í–∏–¥"])
        score = row["–û—Ü—ñ–Ω–∫–∞"]

        if place == 1:
            name_html = f"<span class='crown'>üëë {name}</span>"
        else:
            name_html = name

        rows_html += f"<tr class='new'><td>{place}</td><td>{name_html}</td><td>{club}</td><td>{vid}</td><td>{score:.3f}</td></tr>"

    html = f"""
    <div class='results-wrap'>
      <table class='results'>
        <thead><tr><th>–ú—ñ—Å—Ü–µ</th><th>–Ü–º‚Äô—è</th><th>–ö–ª—É–±</th><th>–í–∏–¥</th><th>–û—Ü—ñ–Ω–∫–∞</th></tr></thead>
        <tbody>{rows_html}</tbody>
      </table>
    </div>
    """
    st.markdown(html, unsafe_allow_html=True)
