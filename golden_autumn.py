import streamlit as st
import pandas as pd
import random
from streamlit_gsheets import GSheetsConnection

# ---------------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ----------------
st.set_page_config(page_title="–ó–æ–ª–æ—Ç–∞ –û—Å—ñ–Ω—å 2025", layout="wide")

# ---------------- –¢–µ–º–Ω–∞ —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è ----------------
st.markdown("""
<style>
body {
    background-color: #0d0d0d;
    color: #f6c453;
    overflow-x: hidden;
}
h1 {
    text-align: center;
    color: #f6c453;
    font-weight: bold;
    text-shadow: 0 0 20px #f6c453;
    animation: glow 2s ease-in-out infinite alternate;
}
@keyframes glow {
    from { text-shadow: 0 0 10px #f6c453; }
    to { text-shadow: 0 0 35px #ffd700; }
}
.leaf {
    position: fixed;
    top: -10vh;
    color: #ffd700;
    font-size: 28px;
    opacity: 0.8;
    animation: fall linear infinite;
    z-index: -1;
}
@keyframes fall {
    0% { transform: translateY(0) rotate(0deg); }
    100% { transform: translateY(110vh) rotate(360deg); }
}
table {
    width: 100%;
    border-collapse: collapse;
    background: rgba(30,30,30,0.9);
    border-radius: 14px;
    box-shadow: 0 0 20px rgba(246,196,83,0.3);
}
th, td {
    padding: 10px;
    text-align: center;
    font-size: 18px;
    color: #f6c453;
}
th {
    background-color: #1e1e1e;
    border-bottom: 2px solid #f6c453;
}
tr.highlight {
    animation: slideUp 0.8s ease-out;
}
@keyframes slideUp {
    from { transform: translateY(50px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}
.crown {
    animation: crownPulse 3s ease-in-out infinite;
}
@keyframes crownPulse {
    0%, 100% { text-shadow: 0 0 10px #ffd700; }
    50% { text-shadow: 0 0 25px #ffea00; }
}
.stButton>button {
    background: linear-gradient(90deg, #f6c453, #b8860b);
    color: #0d0d0d !important;
    border: none;
    border-radius: 8px;
    font-weight: bold;
    padding: 0.6rem 1.2rem;
}
.stButton>button:hover {
    background: linear-gradient(90deg, #ffd700, #f6c453);
}
</style>
""", unsafe_allow_html=True)

# ---------------- –ê–Ω—ñ–º–∞—Ü—ñ—è –ª–∏—Å—Ç—è ----------------
leaves_html = ""
for i in range(25):
    left = random.randint(0, 100)
    duration = random.uniform(15, 30)
    delay = random.uniform(0, 25)
    leaf = random.choice(["üçÅ", "üçÇ", "üçÅ", "üçÅ"])
    leaves_html += f'<div class="leaf" style="left:{left}vw; animation-duration:{duration}s; animation-delay:{delay}s;">{leaf}</div>'
st.markdown(leaves_html, unsafe_allow_html=True)

# ---------------- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets ----------------
conn = st.connection("gsheets", type=GSheetsConnection)
sheet_df = conn.read(worksheet="Sheet1", ttl=0)

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —î –∫–æ–ª–æ–Ω–∫–∏
if sheet_df is None or sheet_df.empty:
    sheet_df = pd.DataFrame(columns=["–ú—ñ—Å—Ü–µ", "–Ü–º‚Äô—è", "–ö–ª—É–±", "–í–∏–¥", "–û—Ü—ñ–Ω–∫–∞"])

st.markdown("<h1>–ó–æ–ª–æ—Ç–∞ –û—Å—ñ–Ω—å 2025 üçÅ</h1>", unsafe_allow_html=True)

# ---------------- –ü–∞–Ω–µ–ª—å —Å—É–¥–¥—ñ ----------------
with st.expander("–ü–∞–Ω–µ–ª—å —Å—É–¥–¥—ñ", expanded=True):
    c1, c2, c3, c4 = st.columns(4)
    name = c1.text_input("–Ü–º‚Äô—è")
    club = c2.text_input("–ö–ª—É–±")
    event = c3.text_input("–í–∏–¥")
    score = c4.text_input("–û—Ü—ñ–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 27.800)")

    colA, colB = st.columns(2)
    add_btn = colA.button("‚ûï –î–æ–¥–∞—Ç–∏ —É—á–∞—Å–Ω–∏—Ü—é")
    clear_btn = colB.button("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é")

# ---------------- –û–±—Ä–æ–±–∫–∞ –¥—ñ–π ----------------
if add_btn:
    if name and club and event and score:
        try:
            score_val = float(score.replace(",", "."))
            new_row = pd.DataFrame([[None, name, club, event, f"{score_val:.3f}"]],
                                   columns=["–ú—ñ—Å—Ü–µ", "–Ü–º‚Äô—è", "–ö–ª—É–±", "–í–∏–¥", "–û—Ü—ñ–Ω–∫–∞"])
            sheet_df = pd.concat([sheet_df, new_row], ignore_index=True)
            sheet_df["–û—Ü—ñ–Ω–∫–∞"] = sheet_df["–û—Ü—ñ–Ω–∫–∞"].astype(float)
            sheet_df = sheet_df.sort_values(by="–û—Ü—ñ–Ω–∫–∞", ascending=False).reset_index(drop=True)
            sheet_df["–ú—ñ—Å—Ü–µ"] = sheet_df.index + 1
            conn.update(worksheet="Sheet1", data=sheet_df)
            st.success("‚úÖ –£—á–∞—Å–Ω–∏—Ü—é –¥–æ–¥–∞–Ω–æ!")
        except ValueError:
            st.error("‚ö†Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä —Ñ–æ—Ä–º–∞—Ç –æ—Ü—ñ–Ω–∫–∏!")

if clear_btn:
    conn.update(worksheet="Sheet1", data=pd.DataFrame(columns=["–ú—ñ—Å—Ü–µ", "–Ü–º‚Äô—è", "–ö–ª—É–±", "–í–∏–¥", "–û—Ü—ñ–Ω–∫–∞"]))
    st.warning("üßπ –¢–∞–±–ª–∏—Ü—é –æ—á–∏—â–µ–Ω–æ!")

# ---------------- –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ ----------------
if not sheet_df.empty:
    df = sheet_df.copy()
    df.iloc[0, 1] = f"<span class='crown'>üëë {df.iloc[0, 1]}</span>"
    html = "<table><thead><tr>" + "".join([f"<th>{col}</th>" for col in df.columns]) + "</tr></thead><tbody>"
    for _, row in df.iterrows():
        html += f"<tr>" + "".join([f"<td>{x}</td>" for x in row.values]) + "</tr>"
    html += "</tbody></table>"
    st.markdown(html, unsafe_allow_html=True)
else:
    st.info("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —É—á–∞—Å–Ω–∏—Ü—å ‚Äî –¥–æ–¥–∞–π –ø–µ—Ä—à—É –Ω–∏–∂—á–µ üëá")
