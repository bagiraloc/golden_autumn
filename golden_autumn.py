import streamlit as st
import pandas as pd
import random
import gspread
import json
from google.oauth2.service_account import Credentials
from urllib.parse import urlparse, parse_qs

# ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ----------------
st.set_page_config(page_title="–ó–æ–ª–æ—Ç–∞ –û—Å—ñ–Ω—å 2025", layout="wide")

# ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets ----------------
# –í–Ω–∏–º–∞–Ω–∏–µ: –≤ Secrets –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π JSON –ø–æ–¥ –∫–ª—é—á–æ–º 'gcp_service_account'
# –ü—Ä–∏–º–µ—Ä: st.secrets["gcp_service_account"] -> dict –∏–ª–∏ JSON-—Å—Ç—Ä–æ–∫–∞
SHEET_URL = st.secrets.get("sheet_url", "https://docs.google.com/spreadsheets/d/1S5mf3gVU-FHgOJ_kpfTn02ZzYeXMw0VTfGNX-RL6KMY/edit")
# –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏) –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –≤ secrets['sheet_name'] –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–¥–µ—Å—å:
SHEET_NAME = st.secrets.get("sheet_name", "–ê—Ä–∫—É—à1")  # <- –ø–æ–º–µ–Ω—è–π—Ç–µ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –∏–º—è –ª–∏—Å—Ç–∞

# –§—É–Ω–∫—Ü–∏—è: –≤–µ—Ä–Ω—É—Ç—å spreadsheet id –∏–∑ URL
def sheet_id_from_url(url):
    try:
        parts = url.split("/")
        # –æ–±—ã—á–Ω–æ id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É /d/ and /edit
        if "/d/" in url:
            return parts[parts.index("d") + 1] if "d" in parts else url.split("/d/")[1].split("/")[0]
        # fallback: parse query
        q = parse_qs(urlparse(url).query)
        return q.get("id", [None])[0]
    except Exception:
        return None

# –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ service account –∏–∑ secrets
def get_credentials_from_secrets():
    if "gcp_service_account" not in st.secrets:
        raise RuntimeError("–í st.secrets –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á 'gcp_service_account'. –î–æ–±–∞–≤—å—Ç–µ JSON —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
    sa = st.secrets["gcp_service_account"]
    # sa –º–æ–∂–µ—Ç –±—ã—Ç—å dict (–µ—Å–ª–∏ –≤—ã –≤—Å—Ç–∞–≤–ª—è–ª–∏ –æ–±—ä–µ–∫—Ç), –ª–∏–±–æ —Å—Ç—Ä–æ–∫–æ–π JSON
    if isinstance(sa, str):
        sa = json.loads(sa)
    # Scope
    scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_info(sa, scopes=scopes)
    return creds

# –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏ –≤–µ—Ä–Ω—É—Ç—å Worksheet (gspread)
def open_worksheet():
    creds = get_credentials_from_secrets()
    gc = gspread.authorize(creds)
    sid = sheet_id_from_url(SHEET_URL)
    if not sid:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã –ø–æ URL. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ sheet_url –≤ secrets.")
    sh = gc.open_by_key(sid)
    try:
        ws = sh.worksheet(SHEET_NAME)
    except gspread.exceptions.WorksheetNotFound:
        # –µ—Å–ª–∏ –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É 0
        ws = sh.get_worksheet(0)
    return ws

# ---------- –°—Ç–∏–ª–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏—è CSS ----------
def render_css(font_px):
    css = f"""
    <style>
    body {{ background-color: #0d0d0d; color: #f6c453; overflow-x: hidden; }}
    h1 {{ text-align: center; color: #f6c453; font-weight: bold; text-shadow: 0 0 20px #f6c453;
         animation: glow 2s ease-in-out infinite alternate; }}
    @keyframes glow {{ from {{ text-shadow: 0 0 10px #f6c453; }} to {{ text-shadow: 0 0 35px #ffd700; }} }}
    .leaf {{ position: fixed; top: -10vh; color: #ffd700; font-size: 28px; opacity: 0.8; animation: fall linear infinite; z-index: -1; }}
    @keyframes fall {{ 0% {{ transform: translateY(0) rotate(0deg); }} 100% {{ transform: translateY(110vh) rotate(360deg); }} }}
    table {{ width: 100%; border-collapse: collapse; background: rgba(30,30,30,0.9); border-radius: 14px; box-shadow: 0 0 20px rgba(246,196,83,0.3); font-size: {font_px}; }}
    th, td {{ padding: 6px; text-align: center; color: #f6c453; word-break: break-word; }}
    th {{ background-color: #1e1e1e; border-bottom: 2px solid #f6c453; }}
    tr.highlight {{ animation: slideUp 0.8s ease-out; }}
    @keyframes slideUp {{ from {{ transform: translateY(50px); opacity: 0; }} to {{ transform: translateY(0); opacity: 1; }} }}
    .crown {{ animation: crownPulse 3s ease-in-out infinite; }}
    @keyframes crownPulse {{ 0%,100% {{ text-shadow: 0 0 10px #ffd700; }} 50% {{ text-shadow: 0 0 25px #ffea00; }} }}
    .stButton>button {{ background: linear-gradient(90deg, #f6c453, #b8860b); color: #0d0d0d !important; border: none; border-radius: 8px; font-weight: bold; padding: 0.6rem 1.2rem; }}
    .stButton>button:hover {{ background: linear-gradient(90deg, #ffd700, #f6c453); }}
    </style>
    """
    return css

# ---------- –õ–∏—Å—Ç–æ—á–∫–∏ (HTML) ----------
def render_leaves(n=20):
    leaves_html = ""
    for i in range(n):
        left = random.randint(0, 100)
        duration = round(random.uniform(12, 28), 2)
        delay = round(random.uniform(0, 20), 2)
        leaf = random.choice(["üçÅ","üçÅ","üçÇ","üçÅ"])
        leaves_html += f'<div class="leaf" style="left:{left}vw; animation-duration:{duration}s; animation-delay:{delay}s;">{leaf}</div>'
    return leaves_html

# ---------------- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ----------------
# 1) –ß–∏—Ç–∞–µ–º —Å –ª–∏—Å—Ç–∞ –≤ DataFrame (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Äî –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ–π DF
def read_sheet_df():
    try:
        ws = open_worksheet()
        data = ws.get_all_values()  # —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
        if not data or len(data) <= 1:
            # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö -> –ø—É—Å—Ç–æ–π df
            if data:
                cols = data[0]
            else:
                cols = ["–ú—ñ—Å—Ü–µ","–Ü–º‚Äô—è","–ö–ª—É–±","–í–∏–¥","–û—Ü—ñ–Ω–∫–∞"]
            return pd.DataFrame(columns=cols)
        df = pd.DataFrame(data[1:], columns=data[0])
        # –ü–æ–ø—Ä–∞–≤–∫–∞ —Ç–∏–ø–æ–≤ –¥–ª—è "–û—Ü—ñ–Ω–∫–∞" –µ—Å–ª–∏ –µ—Å—Ç—å
        if "–û—Ü—ñ–Ω–∫–∞" in df.columns:
            def to_float_safe(x):
                try:
                    return float(str(x).replace(",","."))
                except:
                    return None
            df["–û—Ü—ñ–Ω–∫–∞"] = df["–û—Ü—ñ–Ω–∫–∞"].apply(to_float_safe)
        return df
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets: {e}")
        return pd.DataFrame(columns=["–ú—ñ—Å—Ü–µ","–Ü–º‚Äô—è","–ö–ª—É–±","–í–∏–¥","–û—Ü—ñ–Ω–∫–∞"])

# –ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å—å DF –æ–±—Ä–∞—Ç–Ω–æ –≤ –ª–∏—Å—Ç (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—å)
def write_sheet_df(df):
    try:
        ws = open_worksheet()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –û—Ü—ñ–Ω–∫–∞ –∫ —Å—Ç—Ä–æ–∫–µ —Å 3 –∑–Ω–∞–∫–∞–º–∏ –∏ –∑–∞–ø—è—Ç–æ–π
        df_to_write = df.copy()
        if "–û—Ü—ñ–Ω–∫–∞" in df_to_write.columns:
            df_to_write["–û—Ü—ñ–Ω–∫–∞"] = df_to_write["–û—Ü—ñ–Ω–∫–∞"].map(lambda x: f"{x:.3f}" if pd.notna(x) else "")
        values = [df_to_write.columns.tolist()] + df_to_write.astype(str).values.tolist()
        ws.clear()
        ws.update(values)
        return True
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ Google Sheets: {e}")
        return False

# ---------- UI ----------
# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ (—Å –ª–∏—Å—Ç–∞)
df_sheet = read_sheet_df()

# –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω—ã–º
expected_cols = ["–ú—ñ—Å—Ü–µ","–Ü–º‚Äô—è","–ö–ª—É–±","–í–∏–¥","–û—Ü—ñ–Ω–∫–∞"]
for col in expected_cols:
    if col not in df_sheet.columns:
        df_sheet[col] = None
df_sheet = df_sheet[expected_cols]

# –°–æ—Ö—Ä–∞–Ω–∏–º –≤ session_state –∫–æ–ø–∏—é
if "results" not in st.session_state:
    # –µ—Å–ª–∏ –≤ Google Sheets –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî –≤–∑—è—Ç—å –∏—Ö, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
    st.session_state.results = df_sheet.copy()
    # –ï—Å–ª–∏ "–û—Ü—ñ–Ω–∫–∞" ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫ float
    if "–û—Ü—ñ–Ω–∫–∞" in st.session_state.results.columns:
        st.session_state.results["–û—Ü—ñ–Ω–∫–∞"] = st.session_state.results["–û—Ü—ñ–Ω–∫–∞"].apply(lambda x: float(str(x).repl
