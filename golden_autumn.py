import streamlit as st
import pandas as pd
import random

# ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ----------------
st.set_page_config(page_title="–ó–æ–ª–æ—Ç–∞ –û—Å—ñ–Ω—å 2025", layout="wide")

# ---------------- –¢–µ–º–Ω–∞—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è ----------------
st.markdown("""
<style>
body {
    background-color: #0d0d0d;
    color: #f6c453;
    overflow-x: hidden;
}
h1 {
    text-align: center;
    color: #f6c453;
    font-weight: bold;
    text-shadow: 0 0 20px #f6c453;
    animation: glow 2s ease-in-out infinite alternate;
}
@keyframes glow {
    from { text-shadow: 0 0 10px #f6c453; }
    to { text-shadow: 0 0 35px #ffd700; }
}
.leaf {
    position: fixed;
    top: -10vh;
    color: #ffd700;
    font-size: 28px;
    opacity: 0.8;
    animation: fall linear infinite;
    z-index: -1;
}
@keyframes fall {
    0% { transform: translateY(0) rotate(0deg); }
    100% { transform: translateY(110vh) rotate(360deg); }
}
table {
    width: 100%;
    border-collapse: collapse;
    background: rgba(30,30,30,0.9);
    border-radius: 14px;
    box-shadow: 0 0 20px rgba(246,196,83,0.3);
    transition: all 0.5s ease;
}
th, td {
    padding: 6px;
    text-align: center;
    color: #f6c453;
    word-break: break-word;
}
th {
    background-color: #1e1e1e;
    border-bottom: 2px solid #f6c453;
}
tr.highlight {
    animation: slideUp 0.8s ease-out;
}
@keyframes slideUp {
    from { transform: translateY(50px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}
.crown {
    animation: crownPulse 3s ease-in-out infinite;
}
@keyframes crownPulse {
    0%, 100% { text-shadow: 0 0 10px #ffd700; }
    50% { text-shadow: 0 0 25px #ffea00; }
}
.stButton>button {
    background: linear-gradient(90deg, #f6c453, #b8860b);
    color: #0d0d0d !important;
    border: none;
    border-radius: 8px;
    font-weight: bold;
    padding: 0.6rem 1.2rem;
}
.stButton>button:hover {
    background: linear-gradient(90deg, #ffd700, #f6c453);
}
</style>
""", unsafe_allow_html=True)

# ---------------- –õ–∏—Å—Ç–æ—á–∫–∏ ----------------
leaves_html = ""
for i in range(25):
    left = random.randint(0, 100)
    duration = random.uniform(15, 30)
    delay = random.uniform(0, 25)
    leaf = random.choice(["üçÅ", "üçÇ"])
    leaves_html += f'<div class="leaf" style="left:{left}vw; animation-duration:{duration}s; animation-delay:{delay}s;">{leaf}</div>'
st.markdown(leaves_html, unsafe_allow_html=True)

# ---------------- –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ----------------
COLUMNS = ["–ú—ñ—Å—Ü–µ", "–Ü–º‚Äô—è", "–ö–ª—É–±", "–í–∏–¥", "–û—Ü—ñ–Ω–∫–∞"]

if "results" not in st.session_state:
    st.session_state.results = pd.DataFrame(columns=COLUMNS)
if "last_added" not in st.session_state:
    st.session_state.last_added = None

st.markdown("<h1>–ó–æ–ª–æ—Ç–∞ –û—Å—ñ–Ω—å 2025 üçÅ</h1>", unsafe_allow_html=True)

# ---------------- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ----------------
def render_table(df):
    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
    df = df.loc[:, COLUMNS].copy()

    # —Ñ–æ—Ä–º–∞—Ç –æ—Ü–µ–Ω–∫–∏ —Å —Ç—ã—Å—è—á–Ω—ã–º–∏ (3 –∑–Ω–∞–∫–∞)
    df["–û—Ü—ñ–Ω–∫–∞"] = df["–û—Ü—ñ–Ω–∫–∞"].map(lambda x: f"{float(x):.3f}" if pd.notnull(x) else "")

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–æ–Ω—É –ø–µ—Ä–≤–æ–º—É –º–µ—Å—Ç—É, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
    if len(df) > 0:
        # –±–µ–∑–æ–ø–∞—Å–Ω–æ: –µ—Å–ª–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ "–Ü–º‚Äô—è" –µ—Å—Ç—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∑–∞–º–µ–Ω–∏–º –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        first_name = df.iloc[0]["–Ü–º‚Äô—è"] if pd.notnull(df.iloc[0]["–Ü–º‚Äô—è"]) else ""
        df.iloc[0, df.columns.get_loc("–Ü–º‚Äô—è")] = f"<span class='crown'>üëë {first_name}</span>"

    # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞ —É—á–∞—Å—Ç–Ω–∏—Ü
    num_rows = len(df)
    # formula: –ø—Ä–∏ 1-10 —Å—Ç—Ä–æ–∫ ‚Äî –∫—Ä—É–ø–Ω—ã–π, –ø—Ä–∏ 61 ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π
    min_font = 9
    max_font = 20
    # –ª–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
    font_size = max(min_font, int(max_font - (num_rows / 61) * (max_font - min_font)))
    table_style = f"font-size: {font_size}px;"

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º HTML —Ç–∞–±–ª–∏—Ü—É (—Å—Ç—Ä–æ–≥–æ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º COLUMNS)
    html = f"<table style='{table_style}'><thead><tr>"
    for col in COLUMNS:
        html += f"<th>{col}</th>"
    html += "</tr></thead><tbody>"

    for _, row in df.iterrows():
        name_for_highlight = (row["–Ü–º‚Äô—è"] or "").replace("üëë ", "")
        cls = "highlight" if name_for_highlight == st.session_state.last_added else ""
        html += f"<tr class='{cls}'>"
        for col in COLUMNS:
            val = row[col] if pd.notnull(row[col]) else ""
            html += f"<td>{val}</td>"
        html += "</tr>"
    html += "</tbody></table>"

    st.markdown(html, unsafe_allow_html=True)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
if not st.session_state.results.empty:
    render_table(st.session_state.results)
else:
    st.info("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —É—á–∞—Å–Ω–∏—Ü—å.")

# ---------------- –ü–∞–Ω–µ–ª—å —Å—É–¥—å–∏ (–≤–Ω–∏–∑—É) ----------------
st.markdown("---")
st.subheader("‚öñÔ∏è –ü–∞–Ω–µ–ª—å —Å—É–¥–¥—ñ")
c1, c2, c3, c4 = st.columns(4)
name = c1.text_input("–Ü–º‚Äô—è")
club = c2.text_input("–ö–ª—É–±")
event = c3.text_input("–í–∏–¥")
score = c4.text_input("–û—Ü—ñ–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 27.700)")

colA, colB = st.columns([1,1])
add_btn = colA.button("‚ûï –î–æ–¥–∞—Ç–∏ —É—á–∞—Å–Ω–∏—Ü—é")
clear_btn = colB.button("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é")

# ---------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã ----------------
if add_btn:
    if name.strip() == "" or club.strip() == "" or event.strip() == "" or score.strip() == "":
        st.error("–í—Å—ñ –ø–æ–ª—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ.")
    else:
        try:
            score_val = float(score.replace(",", "."))
            # —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ dict ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ø–æ—Ä—è–¥–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
            new_row = {
                "–ú—ñ—Å—Ü–µ": "",      # –ø–æ–∫–∞ –ø—É—Å—Ç–æ ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –Ω–∏–∂–µ
                "–Ü–º‚Äô—è": name.strip(),
                "–ö–ª—É–±": club.strip(),
                "–í–∏–¥": event.strip(),
                "–û—Ü—ñ–Ω–∫–∞": score_val
            }
            st.session_state.results = pd.concat([st.session_state.results, pd.DataFrame([new_row])], ignore_index=True)

            # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä—É–µ–º
            st.session_state.results["–û—Ü—ñ–Ω–∫–∞"] = st.session_state.results["–û—Ü—ñ–Ω–∫–∞"].astype(float)
            st.session_state.results = st.session_state.results.sort_values(by="–û—Ü—ñ–Ω–∫–∞", ascending=False).reset_index(drop=True)
            st.session_state.results["–ú—ñ—Å—Ü–µ"] = st.session_state.results.index + 1
            st.session_state.last_added = name.strip()
            # –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü—ã ‚Äî Streamlit —Å–¥–µ–ª–∞–µ—Ç rerun –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
        except ValueError:
            st.error("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –æ—Ü—ñ–Ω–∫–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä. 27.700")

if clear_btn:
    st.session_state.results = pd.DataFrame(columns=COLUMNS)
    st.session_state.last_added = None
